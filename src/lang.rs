use std::mem;

use emacs::{defun, Result};

use libloading::{Library, Symbol};

use crate::types::*;

/// Load the shared lib FILE and return the language under SYMBOL-NAME.
#[defun]
fn _load_language(file: String, symbol_name: String) -> Result<Language> {
    let lib = Library::new(file)?;
    let tree_sitter_lang: Symbol<'_, unsafe extern "C" fn() -> _> =
        unsafe { lib.get(symbol_name.as_bytes())? };
    let language: Language = unsafe { tree_sitter_lang() };
    // Avoid segmentation fault by not unloading the lib, as language is a static piece of data.
    // TODO: Attach an Rc<Library> to Language instead.
    mem::forget(lib);
    Ok(language)
}

macro_rules! defun_lang_methods {
    ($($(#[$meta:meta])* $($lisp_name:literal)? fn $name:ident $( ( $( $param:ident : $type:ty ),* ) )? -> $rtype:ty )*) => {
        $(
            #[defun$((name = $lisp_name))?]
            $(#[$meta])*
            fn $name(language: Language, $( $( $param : $type ),* )? ) -> Result<$rtype> {
                Ok((language.0).$name( $( $( $param ),* )? ))
            }
        )*
    };
}

defun_lang_methods! {
    /// Return the ABI version number for LANGUAGE.
    /// This version number is used to ensure that languages were generated by a
    /// compatible version of tree-sitter. `ts-set-language' will fail if the language
    /// is incompatible, so there's rarely a need to use this function, except for
    /// debugging purposes.
    "lang-version" fn version -> usize

    /// Return the number of distinct node types defined in LANGUAGE.
    "lang-count-types" fn node_kind_count -> usize

    /// Return the number of distinct field names defined in LANGUAGE.
    "lang-count-fields" fn field_count -> usize

    /// Return the name of a node type, given its numerical TYPE-ID in LANGUAGE.
    "type-name-for-id" fn node_kind_for_id(type_id: u16) -> Option<&'static str>

    /// Return t if the numerical TYPE-ID identifies a named node type in LANGUAGE.
    "type-named-p" fn node_kind_is_named(type_id: u16) -> bool

    /// Return the numerical id of FIELD-NAME in LANGUAGE.
    "field-id-for-name" fn field_id_for_name(field_name: String) -> Option<u16>

    /// Return the field name for the given numerical FIELD-ID defined in LANGUAGE.
    "field-name-for-id" fn field_name_for_id(field_id: u16) -> Option<&'static str>
}
